import time
from datetime import datetime

import mysql.connector
from pyModbusTCP.client import ModbusClient


def interpret_data(data1, start_register):
    skip = False
    a = []
    for i in range(len(data1)):
        current_register = start_register + i
        # Discriminate if the data has sign at Even register
        if int(current_register) % 2 == 0 and int(data1[i]) == 65535:
            temp = int(data1[i + 1])
            temp = (-1 * (65536 - temp))
            a.append(temp)
            skip = True
        elif int(current_register) % 2 != 0 and skip == False:  # Saving the ODD register
            a.append(int(data1[i]))
        else:
            skip = False
    time.sleep(0.5)
    return a


def read_socket(start_register, num_register, tcp_ip):
    # TCP socket: Can auto connect on Modbus request, close after it
    sock = ModbusClient(host=tcp_ip, port=502, auto_open=True, auto_close=True)

    # Read 2 x 16 bits registers at modbus address 0:
    regs = sock.read_holding_registers(start_register, num_register)
    if regs:
        a = interpret_data(regs, start_register)
        return a
    else:
        print("Read error")


def connect(a):
    """ Connect to MySQL database """
    try:
        connection = mysql.connector.connect(host='localhost',
                                             database='pme1',
                                             user='root',
                                             password='udec-2019')
        if connection.is_connected():
            #print('Connected to MySQL database')
            cursor = connection.cursor()
            #print("Trying to insert the array: (%s)" % a)
            sql_insert_query = """
            INSERT INTO `pme1`.`medicionesactuales` (`idSM`, `FechaDeMedicion`, `U12`, `U23`, `U31`, `V1`, `V2`, `V3`, 
            `F`, `I1`, `I2`, `I3`, `INeutral`, `SumPotR`, `SumPotQ`, `SumPotS`, `SumPF`, `P1`, `P2`, `P3`, `Q1`, `Q2`, 
            `Q3`, `S1`, `S2`, `S3`, `PF1`, `PF2`, `PF3`, `Ea+`, `Er+`, `Es`, `Ea-`, `Er-`) VALUES (%s, %s, %s, %s, %s, 
            %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, 
            %s, %s)
            """
            result = cursor.execute(sql_insert_query, a)
            connection.commit()
            print(""""Record inserted successfully into "medicionesactuales" TABLE at: """, a[1])

    except mysql.connector.Error as e:
        print("Failed inserting record into python_users table {}".format(e))

    finally:
        # closing database connection.
        if connection.is_connected():
            cursor.close()
            connection.close()
            #print("MySQL connection is closed")


if __name__ == '__main__':
    print('Executing as Main File')
    # Defining matrix to simulate a iteration of 4 Smart Meters
    matrix_TCPxID = [['192.168.2.166', '192.168.2.166', '192.168.2.166', '192.168.2.166'],
              [1,2,3,4]]
    # Defining Time Variables for stopping the program run.
    current_Date = datetime.now()
    referenceHour = int(current_Date.strftime("%H")) + 0
    referenceMinute = int(current_Date.strftime("%M")) + 1
    print("Inici√≥: %s" % current_Date.strftime('%Y-%m-%d %H:%M:%S'))
    flag = 1

    while flag:
        hour1 = int(time.strftime("%H"))  # Hour for comparing
        minute1 = int(time.strftime("%M"))  # Minute for comparing
        for i in range(len(matrix_TCPxID[0])):
            current_Date = datetime.now()
            if (referenceMinute == minute1) and (referenceHour == hour1):
                print("Ended at: %s" % current_Date.strftime('%Y-%m-%d %H:%M:%S'))
                flag = 0
                break
            else:
                medReg0 = []
                medReg1 = []
                medReg0 = read_socket(50514, 54, matrix_TCPxID[0][i])
                medReg1 = read_socket(50780, 10, matrix_TCPxID[0][i])
                medReg0 += medReg1
                arr = [current_Date.strftime('%Y-%m-%d %H:%M:%S')] + medReg0
                arr.insert(0, matrix_TCPxID[1][i])
                connect(arr)
